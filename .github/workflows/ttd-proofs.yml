name: TTD Proofs â€” build & publish
on:
  workflow_dispatch: {}   # manual only (no auto runs)

permissions:
  contents: write
  id-token: write         # required for Sigstore keyless

jobs:
  proofs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Generate proofs for index.html only (no Node, no build)
      - name: Generate proofs (inline)
        shell: bash
        run: |
          mkdir -p proofs
          python - <<'PY'
          import json, hashlib, time
          from pathlib import Path
          ROOT=Path('.'); OUT=ROOT/'proofs'; OUT.mkdir(exist_ok=True)
          files=[p for p in [ROOT/'index.html'] if p.exists()]
          files=sorted(files, key=lambda p: p.as_posix())
          def sha256_file(p):
            h=hashlib.sha256(); h.update(p.read_bytes()); return h.hexdigest()
          lines=[]; hashes=[]
          for p in files:
            h=sha256_file(p); lines.append(f"{h}  {p.as_posix()} ({p.stat().st_size} bytes)"); hashes.append((p.as_posix(), h))
          (OUT/'HASHES.txt').write_text("\n".join(lines) if lines else "No artifacts found.", encoding='utf-8')
          def merkle_root(hexes):
            if not hexes: return None,[]
            lvl=[bytes.fromhex(x) for x in hexes]; lvls=[[x.hex() for x in lvl]]
            import hashlib
            while len(lvl)>1:
              nxt=[]
              for i in range(0,len(lvl),2):
                a=lvl[i]; b=lvl[i+1] if i+1<len(lvl) else lvl[i]
                nxt.append(hashlib.sha256(a+b).digest())
              lvl=nxt; lvls.append([x.hex() for x in lvl])
            return lvl[0].hex(),lvls
          root,levels=merkle_root([h for _,h in hashes])
          merkle={"algorithm":"sha256","leaves":[{"file":f,"sha256":h} for f,h in hashes],"levels":levels,"merkle_root":root}
          (OUT/'MERKLE.json').write_text(json.dumps(merkle,indent=2), encoding='utf-8')
          sbom={"bomFormat":"CycloneDX","specVersion":"1.4","version":1,"metadata":{"timestamp":time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime())},"components":[]}
          (OUT/'SBOM.json').write_text(json.dumps(sbom,indent=2), encoding='utf-8')
          att={"_type":"https://in-toto.io/Statement/v1","predicateType":"https://slsa.dev/provenance/v1",
               "subject":[{"name":f,"digest":{"sha256":h}} for f,h in hashes],
               "predicate":{"buildType":"https://slsa.dev/container-based-build/v1#static",
                            "builder":{"id":"github-actions://ttd-proofs"},
                            "metadata":{"invocationId":f"ttd-proofs-{int(time.time())}"}}}
          (OUT/'ATTESTATION.json').write_text(json.dumps(att,indent=2), encoding='utf-8')
          (OUT/'README.md').write_text("Proofs generated via GitHub Actions. Verify hashes in HASHES.txt.", encoding='utf-8')
          PY

      - name: Pack proofs ZIP
        shell: bash
        run: |
          python - <<'PY'
          import os, zipfile
          z=zipfile.ZipFile('ttd_proofs_pack.zip','w',zipfile.ZIP_DEFLATED)
          for root,_,files in os.walk('proofs'):
            for f in files:
              p=os.path.join(root,f)
              z.write(p, arcname=os.path.relpath(p,'proofs'))
          z.close()
          PY

      - name: Install cosign (Sigstore)
        uses: sigstore/cosign-installer@v3.5.0

      - name: Keyless sign proofs (OIDC)
        env: { COSIGN_EXPERIMENTAL: "1" }
        run: |
          cosign sign-blob --yes \
            --output-signature proofs/ATTESTATION.json.sig \
            --output-certificate proofs/ATTESTATION.json.cert \
            proofs/ATTESTATION.json
          cosign sign-blob --yes \
            --output-signature proofs/ttd_proofs_pack.zip.sig \
            --output-certificate proofs/ttd_proofs_pack.zip.cert \
            ttd_proofs_pack.zip

      - name: Upload signed artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ttd_proofs_signed
          path: |
            proofs/**
            ttd_proofs_pack.zip

      - name: Commit proofs to repo
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(proofs): update proofs pack (signed)"
          file_pattern: |
            proofs/**
            ttd_proofs_pack.zip
